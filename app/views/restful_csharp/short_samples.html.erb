<div id="textoCapitulo">
	
<h3>Typical hypermedia aware resource representation</h3>

<p>
	A Restful application should support hypermedia content, and following this constraint, a typical resource representing an order to take part in some trainings could be:
</p>

<pre>
<%= html '
<order>
	<product>rails training</product>				
	<price>512.45</price>
	<atom:link rel="refresh" href="http://www.caelum.com.br/orders/1" xmlns:atom="http://www.w3.org/2005/Atom"/>
	<atom:link rel="update" href="http://www.caelum.com.br/orders/1" xmlns:atom="http://www.w3.org/2005/Atom"/>
	<atom:link rel="pay" href="http://www.caelum.com.br/orders/1/payment" xmlns:atom="http://www.w3.org/2005/Atom"/>
	<atom:link rel="destroy" href="http://www.caelum.com.br/orders/1" xmlns:atom="http://www.w3.org/2005/Atom"/>
</order>
'%>
</pre>
	
<h2>Short example</h2>

<p>This documentation will guide you on how to create a simple REST client using Restfulie.</p>

<h3>The client</h3>

<p>
If you use Restfulie to access such a resource, there will be one entry point and all it's interactions will be driven by hypermedia links:<br/><br/>

<pre>
//retrieves the resource through GET: the entry point
dynamic order = Restfulie.At(resourceURI).Get();

Console.WriteLine("the order price is " + order.Price);
Console.WriteLine("The order product is" + order.Product);


//  Executing a state transition:
order.Pay();	


// sends a delete request
order.Cancel()

</pre>
</p>
<h3>The server</h3>

<p>We will use the Restfulie's <a href="http://github.com/caelum/restfulie-test">ordering example application</a> in Rails as a server. Its source code is open and can be found at github, and <a href="http://restfulie-test.heroku.com/">a live version</a> can be found at heroku.</p>


</div>