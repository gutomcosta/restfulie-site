<div id="textoCapitulo">
<h2>VRaptor3 - Guia de 1 minuto</h2>
<p>O VRaptor 3 foca em simplicidade e, portanto, todas as funcionalidades que você verá têm como primeira meta resolver o problema do programador da maneira menos intrusiva possível em seu código. Tanto para salvar, remover, buscar e atualizar ou ainda funcionalidades que costumam ser mais complexas como upload e download de arquivos, resultados em formatos diferentes (xml, json, xhtml etc), tudo isso é feito através de funcionalidades simples do VRaptor 3, que sempre procuram encapsular HttpServletRequest, Response, Session e toda a API do javax.servlet.</p>
<h3>Começando um projeto</h3>
<p>Você pode começar seu projeto a partir do vraptor-blank-project, que contém as dependências necessárias e a configuração no web.xml para começar seu projeto. 
Ele pode ser baixado em: <a href=" http://vraptor.caelum.com.br/download.html">http://vraptor.caelum.com.br/download.html</a></p>
<h3>Um controller simples</h3>
<p>Com o VRaptor configurado no seu web.xml, basta criar os seus controllers para receber as requisições e começar a construir seu sistema. Um controller simples seria:</p>
<pre>
/*
* anotando seu controller com @Resource, seus métodos públicos ficarão disponíveis
* para receber requisições web.
*/
@Resource
public class ClientsController {

private ClientDao dao;

/*
* Você pode receber as dependências da sua classe no construtor, e o VRaptor vai
* se encarregar de criar ou localizar essas dependências pra você e usá-las pra
* criar o seu controller. Para que o VRaptor saiba como criar o ClientDao você
* deve anotá-lo com @Component.
*/
public ClientsController(ClientDao dao) {
this.dao = dao;   
}

/*
* Todos os métodos públicos do controller serão acessíveis via web.
* Neste caso, o método form estará acessível pela URI /clients/form,
* e a view padrão será /WEB-INF/jsp/clients/form.jsp
*/
public void form() {
}

/*
* Você pode receber parâmetros no seu método, e o VRaptor vai tentar popular os
* campos dos parâmetro de acordo com a requisição. Se houver na requisição:
* custom.name=Lucas
* custom.address=R.Vergueiro
* então teremos os campos name e address do Client custom estarão populados com
* Lucas e R.Vergueiro via getters e setters
* URI: /clients/add
* view: /WEB-INF/jsp/clients/add.jsp
*/
public void add(Client custom) {
dao.save(custom);
}

/*
* O retorno do seu método é exportado para a view. Nesse caso, como o retorno é
* uma lista de clientes, a variável acessível no jsp será ${clientList}.
* URI: /clients/list
* view: /WEB-INF/jsp/clients/list.jsp
*/
public List<Client> list() {
return dao.listAll():
}

/*
* Se o retorno for um tipo simples, o nome da variável exportada será o nome da
* classe com a primeira letra minúscula. Nesse caso, como retornou um Client, a
* variável na jsp será ${client}.
* Devemos ter um parâmetro da requisição id=5 por exemplo, e o VRaptor vai
* fazer a conversão do parâmetro em Long, e passar como parâmetro do método.
* URI: /clients/view
* view: /WEB-INF/jsp/clients/view.jsp
*/
public Client view(Long id) {
return dao.load(id);
}
}
</pre>
<p>Para uma introdução mais detalhada, veja o Guia inicial de 10 minutos. </p>
</div>