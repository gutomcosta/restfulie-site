<div id="textoCapitulo">
<h3>Typical hypermedia aware resource representation</h3>

<p>
Following the definition of a RESTful application supporting resources with hypermedia content, a typical resource representing an order to create courses would be:
</p>

<pre>
	<%= html '
<order>
	<product>rails training</product>
	<product>REST training</product>
	<price>512.45</price>
	<atom:link rel="refresh" href="http://www.caelum.com.br/orders/1" xmlns:atom="http://www.w3.org/2005/Atom"/>
	<atom:link rel="update" href="http://www.caelum.com.br/orders/1" xmlns:atom="http://www.w3.org/2005/Atom"/>
	<atom:link rel="pay" href="http://www.caelum.com.br/orders/1/payment" xmlns:atom="http://www.w3.org/2005/Atom"/>
	<atom:link rel="destroy" href="http://www.caelum.com.br/orders/1" xmlns:atom="http://www.w3.org/2005/Atom"/>
</order>
'%>
</pre>

<h3>Restfulie: client-side</h3>

<p>
	If you use Restfulie to access such a resource, all its interactions will be driven by its hypermedia content:<br/><br/>
	
<pre>
# retrieves the resource through GET
order = Order.from_web resource_uri

puts "Order price is #{order.price}"

# sends a post request to create a payment
order.pay payment

# sends a delete request
order.cancel
</pre>
</p>

<h3>Restfulie: server-side</h3>

<p>This is a simple example how to make your state changes available to your resource consumers:</p>

<pre>
class Order < ActiveRecord::Base

  acts_as_restfulie do |transitions|
    transitions << [:show]
    transitions << [:destroy] if can_cancel?
    transitions << [:controller => :payments, :action => :create, {:id => id}] if can_pay?
  end
end
</pre>

<p>
	You might want to create a migration with a string field named status for your resource:</p>

<pre>
scripts/generate migration add_status_to_order	
</pre>
</blockquote>

<p>Content:</p>

<pre>
class AddStatusToOrder < ActiveRecord::Migration
  def self.up
    add_column :orders, :status, :string
    Order.all.each do |order|
      order.status = "unpaid"
      order.save
  	end
  end

  def self.down
    remove_column :orders, :status
  end
end
</pre>

<p>Or simply define a status reader and writer on your own.
</p>

<h3>Restfulie server-side: state machine</h3>

<p>For those willing to implement a more complex or advanced state machine, you can use the dsl-like api:<br/><br/>

<pre>
class Order < ActiveRecord::Base
  acts_as_restfulie

  state :unpaid, :allow => [:latest, :pay, :cancel]
  state :cancelled, :allow => :latest

  transition :latest, {:action => :show}
  transition :cancel, {:action => :destroy}, :cancelled
  transition :pay, {}, :preparing
end
</pre>
</p>

</div>